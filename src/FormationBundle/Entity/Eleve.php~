<?php

namespace FormationBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Eleve
 */
class Eleve
{

    public function __toString()
    {
        return $this->getNom();
    }

    public $file;

    protected function getUploadDir()
    {
        return 'uploads/eleves';
    }

    protected function getUploadRootDir()
    {
        return __DIR__.'/../../../web/'.$this->getUploadDir();
    }

    public function getWebPath()
    {
        return null === $this->logo ? null : $this->getUploadDir().'/'.$this->logo;
    }

    public function getAbsolutePath()
    {
        return null === $this->logo ? null : $this->getUploadRootDir().'/'.$this->logo;
    }

    public $filecv;

    protected function getUploadDirCV()
    {
        return 'uploads/cv';
    }

    protected function getUploadRootDirCV()
    {
        return __DIR__.'/../../../web/'.$this->getUploadDirCV();
    }

    public function getWebPathCV()
    {
        return null === $this->cv ? null : $this->getUploadDirCV().'/'.$this->cv;
    }

    public function getAbsolutePathCV()
    {
        return null === $this->cv ? null : $this->getUploadRootDirCV().'/'.$this->cv;
    }

    public $filecva;

    protected function getUploadDirCVA()
    {
        return 'uploads/cva';
    }

    protected function getUploadRootDirCVA()
    {
        return __DIR__.'/../../../web/'.$this->getUploadDirCVA();
    }

    public function getWebPathCVA()
    {
        return null === $this->cva ? null : $this->getUploadDirCVA().'/'.$this->cva;
    }

    public function getAbsolutePathCVA()
    {
        return null === $this->cva ? null : $this->getUploadRootDirCVA().'/'.$this->cva;
    }

    /**
     * @ORM\PrePersist
     */
    public function preUpload()
    {
        if (null !== $this->file) {
            // do whatever you want to generate a unique name
            $this->logo = uniqid().'.'.$this->file->guessExtension();
        }

        if (null !== $this->filecv) {
            // do whatever you want to generate a unique name
            $this->cv = uniqid().'.'.$this->filecv->guessExtension();
        }

        if (null !== $this->filecva) {
            // do whatever you want to generate a unique name
            $this->cva = uniqid().'.'.$this->filecva->guessExtension();
        }
    }

    /**
     * @ORM\PrePersist
     */
    public function setCreatedAtValue()
    {
        // Add your code here
    }

    /**
     * @ORM\PrePersist
     */
    public function setExpiresAtValue()
    {
        // Add your code here
    }

    /**
     * @ORM\PreUpdate
     */
    public function setUpdatedAtValue()
    {
        // Add your code here
    }

    /**
     * @ORM\PostPersist
     */
    public function upload()
    {
        if (null === $this->file) {
            return;
        }

        // if there is an error when moving the file, an exception will
        // be automatically thrown by move(). This will properly prevent
        // the entity from being persisted to the database on error
        $this->file->move($this->getUploadRootDir(), $this->logo);

        unset($this->file);

        if (null === $this->filecv) {
            return;
        }

        // if there is an error when moving the file, an exception will
        // be automatically thrown by move(). This will properly prevent
        // the entity from being persisted to the database on error
        $this->filecv->move($this->getUploadRootDirCV(), $this->cv);

        unset($this->filecv);

        if (null === $this->filecva) {
            return;
        }

        // if there is an error when moving the file, an exception will
        // be automatically thrown by move(). This will properly prevent
        // the entity from being persisted to the database on error
        $this->filecva->move($this->getUploadRootDirCVA(), $this->cva);

        unset($this->filecva);
    }

    /**
     * @ORM\PostRemove
     */
    public function removeUpload()
    {
        if ($file = $this->getAbsolutePath()) {
            unlink($file);
        }

        if ($filecv = $this->getAbsolutePathCV()) {
            unlink($filecv);
        }

        if ($filecva = $this->getAbsolutePathCVA()) {
            unlink($filecva);
        }
    }

    //generate
    
}
